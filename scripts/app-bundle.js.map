{"version":3,"sources":["app.ts","dependency-injection.ts","environment.ts","main.ts","C:/dev/bfugina-inmotion.visualstudio.com/planning-poker-client/src/model/index.js","C:/dev/bfugina-inmotion.visualstudio.com/planning-poker-client/src/model/session.js","resources/index.ts","services/SessionService.ts","routes/home/index.ts"],"names":[],"mappings":"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","file":"app-bundle.js","sourcesContent":["export class App {\n  router: any;\n  configureRouter(config, router) {\n    this.router = router;\n    config.title = 'Planning Poker';\n    config.map([\n      { route: ['', 'home'], name: 'home', moduleId: 'routes/home/index' }\n    ]);\n  }\n\n}\n","export interface IDependency {}\r\nexport type IDependencyContainer = IDependency[]\r\n\r\nexport const DI = {\r\n    ISessionService : {name: 'ISessionService'}\r\n}\r\n\r\nimport {SessionService} from 'services/SessionService'\r\n\r\nexport const Singletons = [\r\n    {interface: DI.ISessionService, implementation: SessionService}\r\n]","export default {\n  debug: true,\n  testing: true\n};\n","import {Aurelia} from 'aurelia-framework'\nimport environment from 'environment';\nimport { Singletons } from 'dependency-injection'\n\n//Configure Bluebird Promises.\n(<any>Promise).config({\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia: Aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  // Register all singleton implementations\n  Singletons.forEach(singleton => {\n    aurelia.container.registerSingleton(singleton.interface, singleton.implementation)\n  })\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n",null,null,"import {FrameworkConfiguration} from 'aurelia-framework';\n\nexport function configure(config: FrameworkConfiguration) {\n  //config.globalResources([]);\n}\n","import {ISessionId} from 'model'\r\nimport {HttpClient} from 'aurelia-fetch-client'\r\n\r\nexport interface ISessionService {\r\n    StartSession(sessionName: string, masterName: string) : Promise<ISessionId> \r\n}\r\n\r\nexport class SessionService {\r\n\r\n    private client : HttpClient\r\n\r\n    constructor() {       \r\n        this.client = new HttpClient()\r\n\r\n        this.client.configure(config => {\r\n            config\r\n            .withBaseUrl('http://localhost:9002/api/')\r\n            .withDefaults({\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'X-Requested-With': 'Fetch'\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    async StartSession(sessionName: string, masterName: string) : Promise<ISessionId> {\r\n        \r\n        var response = await this.client.fetch(`startup/sessions/${sessionName}/${masterName}`, {\r\n            method: 'post'\r\n        })\r\n\r\n        var sessionId : ISessionId = await response.json()\r\n        return sessionId\r\n    }\r\n\r\n}","import { inject } from 'aurelia-framework'\r\nimport { DI } from 'dependency-injection'\r\nimport { ISessionService } from 'services/SessionService'\r\n\r\n@inject(DI.ISessionService)\r\nexport class Home {\r\n    session : string\r\n    master: string\r\n\r\n    constructor(\r\n        private sessionService: ISessionService\r\n    ) {\r\n    }\r\n\r\n    startSession(){\r\n        this.sessionService.StartSession(this.session, this.master);\r\n    }\r\n}"],"sourceRoot":".."}